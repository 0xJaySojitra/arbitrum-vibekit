/**
 * testLiquidationData Tool
 * 
 * A dedicated tool to test and display the LiquidationPreventionData format
 * This is for testing purposes to see the structured data format
 */

import { createSuccessTask, createErrorTask, type VibkitToolDefinition } from 'arbitrum-vibekit-core';
import { z } from 'zod';
import type { LiquidationPreventionContext } from '../context/types.js';
import { generateLiquidationPreventionData } from '../utils/liquidationData.js';

// Input schema for testLiquidationData tool
const TestLiquidationDataParams = z.object({
    userAddress: z.string().describe('The wallet address to analyze'),
    targetHealthFactor: z.string().optional().default("1.5").describe('Target health factor for analysis'),
});

// testLiquidationData tool implementation
export const testLiquidationDataTool: VibkitToolDefinition<typeof TestLiquidationDataParams, any, LiquidationPreventionContext, any> = {
    name: 'test-liquidation-data',
    description: 'Generate and display LiquidationPreventionData format for testing and verification',
    parameters: TestLiquidationDataParams,
    execute: async (args, context) => {
        try {
            console.log(`üß™ Testing LiquidationPreventionData generation for: ${args.userAddress}`);
            console.log(`üéØ Using target health factor: ${args.targetHealthFactor}`);

            // Generate the structured data
            const liquidationData = await generateLiquidationPreventionData(
                args.userAddress,
                context.custom,
                args.targetHealthFactor
            );

            // Format the data for display
            const suppliedAssets = liquidationData.assets.filter(a => a.type === "SUPPLIED");
            const borrowedAssets = liquidationData.assets.filter(a => a.type === "BORROWED");
            const walletAssets = liquidationData.assets.filter(a => a.type === "WALLET");

            // Create detailed response
            const message = [
                `üß† **LiquidationPreventionData Analysis**`,
                ``,
                `üë§ **User:** ${args.userAddress}`,
                `üéØ **Target Health Factor:** ${liquidationData.preventionConfig.targetHealthFactor}`,
                ``,
                `üìä **Position Summary:**`,
                `‚Ä¢ Current Health Factor: ${liquidationData.positionSummary.currentHealthFactor}`,
                `‚Ä¢ Total Collateral: $${parseFloat(liquidationData.positionSummary.totalCollateralUsd).toLocaleString()}`,
                `‚Ä¢ Total Borrowed: $${parseFloat(liquidationData.positionSummary.totalBorrowsUsd).toLocaleString()}`,
                ``,
                `üí∞ **Supplied Assets (${suppliedAssets.length}):**`,
                ...suppliedAssets.map(asset =>
                    `‚Ä¢ ${asset.symbol}: ${asset.balance} ($${parseFloat(asset.balanceUsd).toLocaleString()}) | LT: ${asset.liquidationThreshold}`
                ),
                ``,
                `üìâ **Borrowed Assets (${borrowedAssets.length}):**`,
                ...borrowedAssets.map(asset =>
                    `‚Ä¢ ${asset.symbol}: ${asset.balance} ($${parseFloat(asset.balanceUsd).toLocaleString()})`
                ),
                ``,
                `üè¶ **Wallet Assets (${walletAssets.length}):**`,
                ...walletAssets.map(asset =>
                    `‚Ä¢ ${asset.symbol}: ${asset.balance} ($${parseFloat(asset.balanceUsd).toLocaleString()}) | Supply: ${asset.canSupply ? '‚úÖ' : '‚ùå'} | Repay: ${asset.canRepay ? '‚úÖ' : '‚ùå'}`
                ),
                ``,
                `üìã **Summary:**`,
                `‚Ä¢ Total Assets: ${liquidationData.assets.length}`,
                `‚Ä¢ Data Structure: Ready for LLM analysis`,
                `‚Ä¢ All liquidation thresholds fetched from Aave Protocol Data Provider`,
                `‚Ä¢ All prices fetched from CoinGecko API`,
                `‚Ä¢ All wallet balances fetched from on-chain contracts`,
                ``,
                `üïê **Generated:** ${new Date().toLocaleString()}`,
            ].filter(line => line !== '').join('\n');

            // Also log the raw JSON structure for debugging
            console.log('\nüìã === RAW LIQUIDATION PREVENTION DATA ===');
            console.log(JSON.stringify(liquidationData, null, 2));
            console.log('üìã === END RAW DATA ===\n');

            return createSuccessTask(
                'test-liquidation-data',
                undefined,
                `üß™ LiquidationPreventionData generated successfully! Found ${liquidationData.assets.length} assets (${suppliedAssets.length} supplied, ${borrowedAssets.length} borrowed, ${walletAssets.length} wallet). Current HF: ${liquidationData.positionSummary.currentHealthFactor}, Target: ${liquidationData.preventionConfig.targetHealthFactor}. ${message}`
            );

        } catch (error) {
            console.error('‚ùå testLiquidationData tool error:', error);
            return createErrorTask(
                'test-liquidation-data',
                error instanceof Error ? error : new Error(`Failed to generate liquidation data: ${error}`)
            );
        }
    },
};
